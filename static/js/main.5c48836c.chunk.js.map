{"version":3,"sources":["context/context.jsx","components/ArrowButtonGroup.jsx","utils/unitConversion.jsx","components/styled.js","components/BarChart.jsx","api/weather.jsx","store/types.jsx","store/actions/weather.jsx","components/DailyForecast.jsx","components/RadioGroup.jsx","context/WeatherProvider.jsx","components/Main.jsx","views/Home.jsx","App.js","store/state.jsx","store/reducers/WeatherReducer.jsx","store/AppStore.jsx","serviceWorker.js","index.js"],"names":["WeatherContext","createContext","useStyles","makeStyles","arrowButtonsContainer","display","flexDirection","justifyContent","width","height","ArrowButtonGroup","classes","useContext","selectedCardIndex","setSelectedCardIndex","onArrowClick","direction","length","useSelector","store","weather","ButtonGroup","className","size","aria-label","fullWidth","orientation","IconButton","onClick","color","disabled","kelvinToFahrenheit","num","Math","round","getTemperature","temperature","isMetric","symbol","temperatureInF","Container","styled","div","InnerContainer","BarChartContainer","Bar","props","Temperature","span","Label","BarChart","weatherData","daily","find","item","id","threeHour","map","temp","hour","fetchWeatherData","lat","long","axios","get","SET_WEATHER_START","SET_WEATHER_SUCCESS","SET_FORECAST_LENGTH","SET_WEATHER_ERROR","SET_IS_LOADING","fetchWeatherFromApi","dispatch","type","then","res","data","forecast","Object","keys","index","push","date","moment","locale","format","threeHourTemp","dt_txt","main","average","array","val","reduce","p","c","transformWeatherData","_","groupBy","list","result","startOf","payload","catch","err","console","log","weatherContainer","weatherCard","padding","border","title","fontWeight","fontSize","marginBottom","subtitle","value","DailyForecast","useDispatch","useEffect","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","isError","isSelected","Box","idx","isVisible","Card","elevation","style","borderColor","opacity","RadioButtonGroup","setIsMetric","unit","RadioGroup","row","name","onChange","FormControlLabel","control","Radio","label","WeatherProvider","children","useState","loading","setLoading","Provider","MainContent","isLoading","CircularProgress","maxWidth","Home","Main","App","initialState","WeatherReducer","state","action","rootReducer","combineReducers","middleware","thunk","createStore","composeWithDevTools","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c48836c.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst WeatherContext = createContext(null);\n\nexport default WeatherContext;\n","import React, { useContext } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ButtonGroup } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport WeatherContext from \"../context/context\";\n\nconst useStyles = makeStyles(() => ({\n  arrowButtonsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"35.5rem\",\n    \"& svg\": {\n      height: \"5rem\",\n      width: \"5rem\",\n    },\n  },\n}));\n\nconst ArrowButtonGroup = () => {\n  const classes = useStyles();\n\n  const { selectedCardIndex, setSelectedCardIndex } = useContext(\n    WeatherContext\n  );\n\n  const onArrowClick = (direction) => {\n    let index;\n\n    // eslint-disable-next-line no-unused-expressions\n    direction === \"left\"\n      ? (index = selectedCardIndex - 1)\n      : (index = selectedCardIndex + 1);\n\n    return setSelectedCardIndex(index);\n  };\n\n  const { length } = useSelector((store) => ({\n    length: store.weather.length,\n  }));\n\n  return (\n    <ButtonGroup\n      className={classes.arrowButtonsContainer}\n      size=\"large\"\n      aria-label=\"button group\"\n      fullWidth\n      orientation=\"horizontal\"\n    >\n      <IconButton\n        onClick={() => onArrowClick(\"left\")}\n        color=\"primary\"\n        aria-label=\"left\"\n        disabled={selectedCardIndex <= 0}\n      >\n        <ArrowBackIosIcon />\n      </IconButton>\n      <IconButton\n        onClick={() => onArrowClick(\"right\")}\n        color=\"primary\"\n        aria-label=\"right\"\n        disabled={selectedCardIndex >= length - 1}\n      >\n        <ArrowForwardIosIcon />\n      </IconButton>\n    </ButtonGroup>\n  );\n};\n\nexport default ArrowButtonGroup;\n","export const kelvinToFahrenheit = (num) =>\n  Math.round((9 / 5) * (num - 273) + 32);\n\nexport const getTemperature = (temperature, isMetric, symbol) => {\n  const convertToCelcius = (temperatureInF) => (temperatureInF - 32) * (5 / 9);\n\n  return isMetric\n    ? `${Math.round(convertToCelcius(temperature))}${symbol ? \"\\xB0C\" : \"\"}`\n    : `${Math.round(temperature)}${symbol ? \"\\xB0F\" : \"\"}`;\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin: 0px auto;\n  max-width: 500px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n`;\n\nexport const InnerContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const BarChartContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nexport const Bar = styled.div`\n  height: ${(props) => props.height}%;\n  background-color: lightblue;\n  margin-top: 10px;\n  width: 56px;\n  box-shadow: 0 0 5px black;\n\n  @media (max-width: 420px) {\n    width: 34px;\n  }\n`;\n\nexport const Temperature = styled.span`\n  font-size: 1.2rem;\n  text-align: center;\n`;\n\nexport const Label = styled.div`\n  font-size: 0.8rem;\n  margin-top: 0.5rem;\n`;\n","import React, { useContext } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport WeatherContext from \"../context/context\";\nimport { getTemperature } from \"../utils/unitConversion\";\nimport {\n  Container,\n  InnerContainer,\n  BarChartContainer,\n  Bar,\n  Temperature,\n  Label,\n} from \"./styled\";\n\nconst BarChart = () => {\n  const { isMetric, selectedCardIndex } = useContext(WeatherContext);\n\n  const { weather } = useSelector((store) => ({\n    weather: store.weather.weatherData,\n  }));\n\n  const daily =\n    weather &&\n    weather.length > 0 &&\n    weather.find((item) => item.id === selectedCardIndex).threeHour;\n\n  return (\n    <Container>\n      <InnerContainer>\n        {daily &&\n          daily.map((item) => (\n            <BarChartContainer>\n              <Temperature>\n                {getTemperature(item.temp, isMetric, true)}\n              </Temperature>\n              <Bar height={getTemperature(item.temp, isMetric)} />\n              <Label> {item.hour} </Label>\n            </BarChartContainer>\n          ))}\n      </InnerContainer>\n    </Container>\n  );\n};\n\nexport default BarChart;\n","import axios from \"axios\";\n\nconst baseUrl = \"https://api.openweathermap.org/data/2.5\";\nconst apiKey = \"b4ba51d1cb7f483373fab3430dd14f6f\";\n\nconst fetchWeatherData = ({ lat, long }) =>\n  axios.get(`${baseUrl}/forecast?lat=${lat}&lon=${long}&appid=${apiKey}`);\n\nexport default fetchWeatherData;\n","export const SET_WEATHER_START = \"SET_WEATHER_START\";\nexport const SET_WEATHER_SUCCESS = \"SET_WEATHER_SUCCESS\";\nexport const SET_FORECAST_LENGTH = \"SET_FORECAST_LENGTH\";\nexport const SET_WEATHER_ERROR = \"SET_WEATHER_ERROR\";\nexport const SET_IS_LOADING = \"SET_IS_LOADING\";\nexport const SET_IS_ERROR = \"SET_IS_ERROR\";\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport \"moment/locale/de\";\nimport fetchWeatherData from \"../../api/weather\";\nimport { kelvinToFahrenheit } from \"../../utils/unitConversion\";\nimport {\n  SET_WEATHER_START,\n  SET_WEATHER_SUCCESS,\n  SET_WEATHER_ERROR,\n  SET_FORECAST_LENGTH,\n  SET_IS_LOADING,\n} from \"../types\";\n\nexport const setWeatherStart = () => ({\n  type: SET_WEATHER_START,\n});\n\nexport const setIsLoading = (loading) => ({\n  type: SET_IS_LOADING,\n  payload: loading,\n});\n\nexport const setWeatherSuccess = (weather) => ({\n  type: SET_WEATHER_SUCCESS,\n  payload: { weather },\n});\n\nexport const setForecastLength = (length) => ({\n  type: SET_FORECAST_LENGTH,\n  payload: { length },\n});\n\nexport const setWeatherFail = (error) => ({\n  type: SET_WEATHER_ERROR,\n  payload: error,\n});\n\nconst transformWeatherData = (res) => {\n  const forecast = [];\n  const averagePerDay = (array) =>\n    array.map((val) => val.main.temp).reduce((p, c) => p + c, 0) / array.length;\n\n  Object.keys(res).map((item, index) =>\n    forecast.push({\n      id: index,\n      date: moment(item).locale(\"de\").format(\"LL\"),\n      threeHour: res[item].map((threeHourTemp) => ({\n        hour: moment(threeHourTemp.dt_txt).format(\"HH:mm\"),\n        temp: kelvinToFahrenheit(threeHourTemp.main.temp),\n      })),\n      average: kelvinToFahrenheit(averagePerDay(res[item])),\n    })\n  );\n\n  return forecast;\n};\n\nexport const fetchWeatherFromApi = ({ lat, long }) => (dispatch) => {\n  dispatch(setWeatherStart());\n  // dispatch(setIsLoading(true));\n\n  fetchWeatherData({ lat, long })\n    .then((res) => {\n      const { data } = res;\n      const groupedResults = _.groupBy(data.list, (result) =>\n        moment(result.dt_txt).startOf(\"day\").format(\"YYYY-MM-DD\")\n      );\n      const forecast = transformWeatherData(groupedResults);\n      dispatch(setWeatherSuccess(forecast));\n      dispatch(setForecastLength(forecast.length));\n    })\n    .catch((err) => {\n      console.log(\"err ===> \", err);\n      dispatch(setWeatherFail(err));\n    });\n  // .finally(() => {\n  //   dispatch(setIsLoading(false));\n  // })\n};\n","import React, { useEffect, useContext } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Box, Card } from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport WeatherContext from \"../context/context\";\nimport { fetchWeatherFromApi } from \"../store/actions/weather\";\nimport { getTemperature } from \"../utils/unitConversion\";\n// import useFetchHook from \"../Hooks/FetchHook\";\n\nconst useStyles = makeStyles(() => ({\n  weatherContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n  },\n  weatherCard: {\n    padding: \"0 2rem 2rem 2rem\",\n    border: \"2px solid blue\",\n  },\n  title: {\n    fontWeight: \"400\",\n    fontSize: \"1.2rem\",\n    marginBottom: \"1rem\",\n  },\n  subtitle: {\n    fontSize: \".8rem\",\n  },\n  value: {\n    fontWeight: \"700\",\n    fontSize: \"1.2rem\",\n  },\n}));\n\nconst DailyForecast = () => {\n  const { isMetric, selectedCardIndex } = useContext(WeatherContext);\n\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((data) => {\n        dispatch(\n          fetchWeatherFromApi({\n            lat: data.coords.latitude,\n            long: data.coords.longitude,\n          })\n        );\n      });\n    }\n  }, [dispatch]);\n\n  const { weather, length, isError } = useSelector((store) => ({\n    weather: store.weather.weatherData,\n    length: store.weather.length,\n    isError: store.weather.isError,\n  }));\n\n  useEffect(() => {\n    if (isError) {\n      console.log(\"Cannot load weather for this place\");\n    }\n  }, [isError]);\n\n  const isSelected = (index) => index === selectedCardIndex;\n\n  const isVisible = (idx) => {\n    if (selectedCardIndex === 0) {\n      return idx <= selectedCardIndex + 2;\n    }\n\n    if (selectedCardIndex === length - 1) {\n      return idx >= selectedCardIndex - 2;\n    }\n\n    return (\n      idx === selectedCardIndex ||\n      idx === selectedCardIndex + 1 ||\n      idx === selectedCardIndex - 1\n    );\n  };\n\n  return (\n    <Box className={classes.weatherContainer}>\n      {weather &&\n        weather.map(\n          (value, idx) =>\n            isVisible(idx) && (\n              <Card\n                className={classes.weatherCard}\n                elevation={isSelected(idx) ? 8 : 4}\n                style={{\n                  borderColor: isSelected(idx) ? \"lightblue\" : \"white\",\n                  opacity: isSelected(idx) ? \"1\" : \"0.4\",\n                }}\n              >\n                <h6 className={classes.title}>{value.date}</h6>\n                <p className={classes.subtitle}> Daily Average: </p>\n                <p className={classes.value}>\n                  {\" \"}\n                  {getTemperature(value.average, isMetric, true)}{\" \"}\n                </p>\n              </Card>\n            )\n        )}\n    </Box>\n  );\n};\n\nexport default DailyForecast;\n","import React, { useContext } from \"react\";\nimport { Box, Radio, RadioGroup, FormControlLabel } from \"@material-ui/core\";\nimport WeatherContext from \"../context/context\";\n\nconst RadioButtonGroup = () => {\n  const { isMetric, setIsMetric } = useContext(WeatherContext);\n  const unit = isMetric ? \"celcius\" : \"fahrenheit\";\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <RadioGroup\n        row\n        className=\"radio\"\n        aria-label=\"unit\"\n        name=\"unit\"\n        value={unit}\n        onChange={() => setIsMetric(!isMetric)}\n      >\n        <FormControlLabel\n          value=\"fahrenheit\"\n          control={<Radio color=\"primary\" />}\n          label=\"Fahrenheit\"\n        />\n        <FormControlLabel\n          value=\"celcius\"\n          control={<Radio color=\"primary\" />}\n          label=\"Celcius\"\n        />\n      </RadioGroup>\n    </Box>\n  );\n};\n\nexport default RadioButtonGroup;\n","import React, { useState } from \"react\";\nimport WeatherContext from \"./context\";\n\nconst WeatherProvider = ({ children }) => {\n  const [isMetric, setIsMetric] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [selectedCardIndex, setSelectedCardIndex] = useState(2);\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        isMetric,\n        setIsMetric,\n        loading,\n        setLoading,\n        selectedCardIndex,\n        setSelectedCardIndex,\n      }}\n    >\n      {children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default WeatherProvider;\n","import React from \"react\";\nimport { Container, CircularProgress } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport ArrowButtonGroup from \"./ArrowButtonGroup\";\nimport BarChart from \"./BarChart\";\nimport DailyForecast from \"./DailyForecast\";\nimport RadioGroup from \"./RadioGroup\";\nimport WeatherProvider from \"../context/WeatherProvider\";\n\nconst MainContent = () => {\n  const { loading } = useSelector((store) => ({\n    loading: store.weather.isLoading,\n  }));\n\n  return loading ? (\n    <CircularProgress />\n  ) : (\n    <Container maxWidth=\"sm\">\n      <WeatherProvider>\n        <RadioGroup />\n        <ArrowButtonGroup />\n        <DailyForecast />\n        <BarChart />\n      </WeatherProvider>\n    </Container>\n  );\n};\nexport default MainContent;\n","import React from \"react\";\n// import { useSelector } from \"react-redux\";\n// import Error from \"./Error\";\n// import { CircularProgress } from \"@material-ui/core\";\nimport Main from \"../components/Main\";\n\nconst Home = () => <Main />;\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./views/Home\";\n\nconst App = () => <Home />;\n\nexport default App;\n","const initialState = {\n  weather: {\n    weatherData: [],\n    isLoading: false,\n  },\n};\n\nexport default initialState;\n","import {\n  SET_WEATHER_START,\n  SET_WEATHER_SUCCESS,\n  SET_FORECAST_LENGTH,\n  SET_WEATHER_ERROR,\n  SET_IS_LOADING,\n} from \"../types\";\nimport initialState from \"../state\";\n\nconst WeatherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_WEATHER_START:\n      return state;\n    case SET_WEATHER_SUCCESS:\n      return {\n        ...state,\n        weatherData: action.payload.weather,\n      };\n    case SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    case SET_FORECAST_LENGTH:\n      return {\n        ...state,\n        length: action.payload.length,\n      };\n    case SET_WEATHER_ERROR:\n      return {\n        ...state,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default WeatherReducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport WeatherReducer from \"./reducers/WeatherReducer\";\nimport initialState from \"./state\";\n\nconst rootReducer = combineReducers({\n  weather: WeatherReducer,\n});\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store/AppStore\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}